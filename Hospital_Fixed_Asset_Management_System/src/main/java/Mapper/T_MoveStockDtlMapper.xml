<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Mapper.T_MoveStockDtlMapper">
  <resultMap id="BaseResultMap" type="domain.T_MoveStockDtl">
    <id column="Id" jdbcType="VARCHAR" property="id" />
    <result column="SortCode" jdbcType="INTEGER" property="sortCode" />
    <result column="OutAmount" jdbcType="INTEGER" property="outAmount" />
    <result column="Price" jdbcType="DECIMAL" property="price" />
    <result column="InAmount" jdbcType="INTEGER" property="inAmount" />
    <result column="MoveStockId" jdbcType="INTEGER" property="moveStockId" />
    <result column="AssetId" jdbcType="INTEGER" property="assetId" />
  </resultMap>
  <sql id="Base_Column_List">
    Id, SortCode, OutAmount, Price, InAmount, MoveStockId, AssetId
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_movestockdtl
    where Id = #{id,jdbcType=VARCHAR}
  </select>
  <select id="selectByAssetId" parameterType="domain.T_MoveStockDtl" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_movestockdtl
    <if test="assetId != null &#38;&#38; assetId != ''">
    where AssetId = #{assetId,jdbcType=INTEGER}
    </if>
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_movestockdtl
    where Id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="domain.T_MoveStockDtl">
    insert into t_movestockdtl (Id, SortCode, OutAmount, 
      Price, InAmount, MoveStockId, 
      AssetId)
    values (#{id,jdbcType=VARCHAR}, #{sortCode,jdbcType=INTEGER}, #{outAmount,jdbcType=INTEGER}, 
      #{price,jdbcType=DECIMAL}, #{inAmount,jdbcType=INTEGER}, #{moveStockId,jdbcType=INTEGER}, 
      #{assetId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="domain.T_MoveStockDtl">
    insert into t_movestockdtl
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        Id,
      </if>
      <if test="sortCode != null">
        SortCode,
      </if>
      <if test="outAmount != null">
        OutAmount,
      </if>
      <if test="price != null">
        Price,
      </if>
      <if test="inAmount != null">
        InAmount,
      </if>
      <if test="moveStockId != null">
        MoveStockId,
      </if>
      <if test="assetId != null">
        AssetId,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="sortCode != null">
        #{sortCode,jdbcType=INTEGER},
      </if>
      <if test="outAmount != null">
        #{outAmount,jdbcType=INTEGER},
      </if>
      <if test="price != null">
        #{price,jdbcType=DECIMAL},
      </if>
      <if test="inAmount != null">
        #{inAmount,jdbcType=INTEGER},
      </if>
      <if test="moveStockId != null">
        #{moveStockId,jdbcType=INTEGER},
      </if>
      <if test="assetId != null">
        #{assetId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="domain.T_MoveStockDtl">
    update t_movestockdtl
    <set>
      <if test="sortCode != null">
        SortCode = #{sortCode,jdbcType=INTEGER},
      </if>
      <if test="outAmount != null">
        OutAmount = #{outAmount,jdbcType=INTEGER},
      </if>
      <if test="price != null">
        Price = #{price,jdbcType=DECIMAL},
      </if>
      <if test="inAmount != null">
        InAmount = #{inAmount,jdbcType=INTEGER},
      </if>
      <if test="moveStockId != null">
        MoveStockId = #{moveStockId,jdbcType=INTEGER},
      </if>
      <if test="assetId != null">
        AssetId = #{assetId,jdbcType=INTEGER},
      </if>
    </set>
    where Id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="domain.T_MoveStockDtl">
    update t_movestockdtl
    set SortCode = #{sortCode,jdbcType=INTEGER},
      OutAmount = #{outAmount,jdbcType=INTEGER},
      Price = #{price,jdbcType=DECIMAL},
      InAmount = #{inAmount,jdbcType=INTEGER},
      MoveStockId = #{moveStockId,jdbcType=INTEGER},
      AssetId = #{assetId,jdbcType=INTEGER}
    where Id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>